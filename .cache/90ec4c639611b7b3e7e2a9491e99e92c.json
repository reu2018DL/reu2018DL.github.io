{"dependencies":[{"name":"C:\\Users\\pedoe\\Documents\\reu2018DL.github.io\\package.json","includedInParent":true,"mtime":1531145464000},{"name":"C:\\Users\\pedoe\\Documents\\reu2018DL.github.io\\.babelrc","includedInParent":true,"mtime":1530821782000},{"name":"C:\\Users\\pedoe\\Documents\\reu2018DL.github.io\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1523414062000},{"name":"@tensorflow/tfjs-core","loc":{"line":13,"column":26}},{"name":"../activations","loc":{"line":14,"column":28}},{"name":"../backend/tfjs_backend","loc":{"line":15,"column":16}},{"name":"../common","loc":{"line":16,"column":23}},{"name":"../constraints","loc":{"line":17,"column":28}},{"name":"../engine/topology","loc":{"line":18,"column":25}},{"name":"../errors","loc":{"line":19,"column":23}},{"name":"../initializers","loc":{"line":20,"column":29}},{"name":"../regularizers","loc":{"line":21,"column":29}},{"name":"../types","loc":{"line":22,"column":22}},{"name":"../utils/conv_utils","loc":{"line":23,"column":27}},{"name":"../utils/generic_utils","loc":{"line":24,"column":28}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar activations_1 = require(\"../activations\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_1 = require(\"../common\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar types_1 = require(\"../types\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar Conv = (function (_super) {\n    __extends(Conv, _super);\n    function Conv(rank, config) {\n        var _this = _super.call(this, config) || this;\n        _this.kernel = null;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.rank = rank;\n        if (_this.rank !== 1 && _this.rank !== 2) {\n            throw new errors_1.NotImplementedError(\"Convolution layer for rank other than 1 or 2 (\" + _this.rank + \") is \" +\n                \"not implemented yet.\");\n        }\n        _this.filters = config.filters;\n        _this.kernelSize = conv_utils_1.normalizeArray(config.kernelSize, rank, 'kernelSize');\n        _this.strides = conv_utils_1.normalizeArray(config.strides == null ? 1 : config.strides, rank, 'strides');\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        common_1.checkPaddingMode(_this.padding);\n        _this.dataFormat =\n            config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;\n        if (_this.rank === 1 && Array.isArray(_this.dilationRate)) {\n            throw new errors_1.ValueError(\"dilationRate must be a number for 1D convolution, but \" +\n                (\"received \" + JSON.stringify(_this.dilationRate)));\n        }\n        if (_this.rank === 2) {\n            if (typeof _this.dilationRate === 'number') {\n                _this.dilationRate = [_this.dilationRate, _this.dilationRate];\n            }\n            else if (_this.dilationRate.length !== 2) {\n                throw new errors_1.ValueError(\"dilationRate must be a number or array of two numbers for 2D \" +\n                    (\"convolution, but received \" + JSON.stringify(_this.dilationRate)));\n            }\n        }\n        _this.activation = activations_1.getActivation(config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        return _this;\n    }\n    Conv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError(\"The channel dimension of the input should be defined. \" +\n                (\"Found \" + inputShape[channelAxis]));\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];\n        this.built = true;\n        var _a;\n    };\n    Conv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = this.bias == null ? null : this.bias.read();\n        if (this.rank === 1) {\n            outputs = K.conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate);\n        }\n        else if (this.rank === 2) {\n            outputs = K.conv2dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        }\n        else if (this.rank === 3) {\n            throw new errors_1.NotImplementedError('3D convolution is not implemented yet.');\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    Conv.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var newSpace = [];\n        var space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (var i = 0; i < space.length; ++i) {\n            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        var outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    };\n    Conv.prototype.getConfig = function () {\n        var config = {\n            rank: this.rank,\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Conv;\n}(topology_1.Layer));\nexports.Conv = Conv;\nvar Conv2D = (function (_super) {\n    __extends(Conv2D, _super);\n    function Conv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    Conv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    return Conv2D;\n}(Conv));\nexports.Conv2D = Conv2D;\ngeneric_utils.ClassNameMap.register('Conv2D', Conv2D);\nvar Conv2DTranspose = (function (_super) {\n    __extends(Conv2DTranspose, _super);\n    function Conv2DTranspose(config) {\n        var _this = _super.call(this, config) || this;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        if (_this.padding !== 'same' && _this.padding !== 'valid') {\n            throw new errors_1.ValueError(\"Conv2DTranspose currently supports only padding modes 'same' \" +\n                (\"and 'valid', but received padding mode \" + _this.padding));\n        }\n        return _this;\n    }\n    Conv2DTranspose.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new errors_1.ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, types_1.DType.float32, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], types_1.DType.float32, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: 4, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];\n        this.built = true;\n        var _a;\n    };\n    Conv2DTranspose.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var input = generic_utils.getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new errors_1.ValueError(\"Conv2DTranspose.call() expects input tensor to be rank-4, but \" +\n                    (\"received a tensor of rank-\" + input.shape.length));\n            }\n            var inputShape = input.shape;\n            var batchSize = inputShape[0];\n            var hAxis;\n            var wAxis;\n            if (_this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            var height = inputShape[hAxis];\n            var width = inputShape[wAxis];\n            var kernelH = _this.kernelSize[0];\n            var kernelW = _this.kernelSize[1];\n            var strideH = _this.strides[0];\n            var strideW = _this.strides[1];\n            var outHeight = conv_utils_1.deconvLength(height, strideH, kernelH, _this.padding);\n            var outWidth = conv_utils_1.deconvLength(width, strideW, kernelW, _this.padding);\n            var outputShape = [batchSize, outHeight, outWidth, _this.filters];\n            if (_this.dataFormat !== 'channelsLast') {\n                input = K.transpose(input, [0, 2, 3, 1]);\n            }\n            var outputs = tfjs_core_1.conv2dTranspose(input, _this.kernel.read(), outputShape, _this.strides, _this.padding);\n            if (_this.dataFormat !== 'channelsLast') {\n                outputs = K.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (_this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);\n            }\n            if (_this.activation != null) {\n                outputs = _this.activation(outputs);\n            }\n            return outputs;\n        });\n    };\n    Conv2DTranspose.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var outputShape = inputShape.slice();\n        var channelAxis;\n        var heightAxis;\n        var widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        var kernelH = this.kernelSize[0];\n        var kernelW = this.kernelSize[1];\n        var strideH = this.strides[0];\n        var strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            conv_utils_1.deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            conv_utils_1.deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    };\n    Conv2DTranspose.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['dilationRate'];\n        return config;\n    };\n    return Conv2DTranspose;\n}(Conv2D));\nexports.Conv2DTranspose = Conv2DTranspose;\ngeneric_utils.ClassNameMap.register('Conv2DTranspose', Conv2DTranspose);\nvar SeparableConv = (function (_super) {\n    __extends(SeparableConv, _super);\n    function SeparableConv(rank, config) {\n        var _this = _super.call(this, rank, config) || this;\n        _this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        _this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        _this.depthwiseKernel = null;\n        _this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new errors_1.ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new errors_1.ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new errors_1.ValueError(\"SeparableConv\" + _this.rank + \"D supports only padding modes: \" +\n                (\"'same' and 'valid', but received \" + JSON.stringify(config.padding)));\n        }\n        _this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_DEPTHWISE_INITIALIZER);\n        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);\n        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);\n        _this.pointwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_POINTWISE_INITIALIZER);\n        _this.pointwiseRegularizer = regularizers_1.getRegularizer(config.pointwiseRegularizer);\n        _this.pointwiseConstraint = constraints_1.getConstraint(config.pointwiseConstraint);\n        return _this;\n    }\n    SeparableConv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new errors_1.ValueError(\"Inputs to SeparableConv\" + this.rank + \"D should have rank \" +\n                (this.rank + 2 + \", but received input shape: \") +\n                (\"\" + JSON.stringify(inputShape)));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new errors_1.ValueError(\"The channel dimension of the inputs should be defined, \" +\n                (\"but found \" + JSON.stringify(inputShape[channelAxis])));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        var pointwiseKernelShape = [];\n        for (var i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        var trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, types_1.DType.float32, this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, types_1.DType.float32, this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], types_1.DType.float32, this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];\n        this.built = true;\n        var _a;\n    };\n    SeparableConv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var output;\n        if (this.rank === 1) {\n            throw new errors_1.NotImplementedError('1D separable convolution is not implemented yet.');\n        }\n        else if (this.rank === 2) {\n            if (this.dataFormat === 'channelsFirst') {\n                inputs = K.transpose(inputs, [0, 2, 3, 1]);\n            }\n            output = tfjs_core_1.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n        }\n        if (this.useBias) {\n            output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n        }\n        if (this.activation != null) {\n            output = this.activation(output);\n        }\n        if (this.dataFormat === 'channelsFirst') {\n            output = K.transpose(output, [0, 3, 1, 2]);\n        }\n        return output;\n    };\n    SeparableConv.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            initializers_1.serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            initializers_1.serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            constraints_1.serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            constraints_1.serializeConstraint(this.pointwiseConstraint);\n        return config;\n    };\n    return SeparableConv;\n}(Conv));\nexports.SeparableConv = SeparableConv;\nvar SeparableConv2D = (function (_super) {\n    __extends(SeparableConv2D, _super);\n    function SeparableConv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    return SeparableConv2D;\n}(SeparableConv));\nexports.SeparableConv2D = SeparableConv2D;\ngeneric_utils.ClassNameMap.register('SeparableConv2D', SeparableConv2D);\nvar Conv1D = (function (_super) {\n    __extends(Conv1D, _super);\n    function Conv1D(config) {\n        var _this = _super.call(this, 1, config) || this;\n        _this.inputSpec = [{ ndim: 3 }];\n        return _this;\n    }\n    Conv1D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    };\n    return Conv1D;\n}(Conv));\nexports.Conv1D = Conv1D;\ngeneric_utils.ClassNameMap.register('Conv1D', Conv1D);\n","map":{"mappings":[{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}}],"sources":{"..\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar activations_1 = require(\"../activations\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_1 = require(\"../common\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar types_1 = require(\"../types\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar Conv = (function (_super) {\n    __extends(Conv, _super);\n    function Conv(rank, config) {\n        var _this = _super.call(this, config) || this;\n        _this.kernel = null;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.rank = rank;\n        if (_this.rank !== 1 && _this.rank !== 2) {\n            throw new errors_1.NotImplementedError(\"Convolution layer for rank other than 1 or 2 (\" + _this.rank + \") is \" +\n                \"not implemented yet.\");\n        }\n        _this.filters = config.filters;\n        _this.kernelSize = conv_utils_1.normalizeArray(config.kernelSize, rank, 'kernelSize');\n        _this.strides = conv_utils_1.normalizeArray(config.strides == null ? 1 : config.strides, rank, 'strides');\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        common_1.checkPaddingMode(_this.padding);\n        _this.dataFormat =\n            config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;\n        if (_this.rank === 1 && Array.isArray(_this.dilationRate)) {\n            throw new errors_1.ValueError(\"dilationRate must be a number for 1D convolution, but \" +\n                (\"received \" + JSON.stringify(_this.dilationRate)));\n        }\n        if (_this.rank === 2) {\n            if (typeof _this.dilationRate === 'number') {\n                _this.dilationRate = [_this.dilationRate, _this.dilationRate];\n            }\n            else if (_this.dilationRate.length !== 2) {\n                throw new errors_1.ValueError(\"dilationRate must be a number or array of two numbers for 2D \" +\n                    (\"convolution, but received \" + JSON.stringify(_this.dilationRate)));\n            }\n        }\n        _this.activation = activations_1.getActivation(config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.biasInitializer =\n            initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        return _this;\n    }\n    Conv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError(\"The channel dimension of the input should be defined. \" +\n                (\"Found \" + inputShape[channelAxis]));\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];\n        this.built = true;\n        var _a;\n    };\n    Conv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = this.bias == null ? null : this.bias.read();\n        if (this.rank === 1) {\n            outputs = K.conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate);\n        }\n        else if (this.rank === 2) {\n            outputs = K.conv2dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        }\n        else if (this.rank === 3) {\n            throw new errors_1.NotImplementedError('3D convolution is not implemented yet.');\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    Conv.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var newSpace = [];\n        var space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (var i = 0; i < space.length; ++i) {\n            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        var outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    };\n    Conv.prototype.getConfig = function () {\n        var config = {\n            rank: this.rank,\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Conv;\n}(topology_1.Layer));\nexports.Conv = Conv;\nvar Conv2D = (function (_super) {\n    __extends(Conv2D, _super);\n    function Conv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    Conv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    return Conv2D;\n}(Conv));\nexports.Conv2D = Conv2D;\ngeneric_utils.ClassNameMap.register('Conv2D', Conv2D);\nvar Conv2DTranspose = (function (_super) {\n    __extends(Conv2DTranspose, _super);\n    function Conv2DTranspose(config) {\n        var _this = _super.call(this, config) || this;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        if (_this.padding !== 'same' && _this.padding !== 'valid') {\n            throw new errors_1.ValueError(\"Conv2DTranspose currently supports only padding modes 'same' \" +\n                (\"and 'valid', but received padding mode \" + _this.padding));\n        }\n        return _this;\n    }\n    Conv2DTranspose.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new errors_1.ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, types_1.DType.float32, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], types_1.DType.float32, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: 4, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];\n        this.built = true;\n        var _a;\n    };\n    Conv2DTranspose.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var input = generic_utils.getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new errors_1.ValueError(\"Conv2DTranspose.call() expects input tensor to be rank-4, but \" +\n                    (\"received a tensor of rank-\" + input.shape.length));\n            }\n            var inputShape = input.shape;\n            var batchSize = inputShape[0];\n            var hAxis;\n            var wAxis;\n            if (_this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            var height = inputShape[hAxis];\n            var width = inputShape[wAxis];\n            var kernelH = _this.kernelSize[0];\n            var kernelW = _this.kernelSize[1];\n            var strideH = _this.strides[0];\n            var strideW = _this.strides[1];\n            var outHeight = conv_utils_1.deconvLength(height, strideH, kernelH, _this.padding);\n            var outWidth = conv_utils_1.deconvLength(width, strideW, kernelW, _this.padding);\n            var outputShape = [batchSize, outHeight, outWidth, _this.filters];\n            if (_this.dataFormat !== 'channelsLast') {\n                input = K.transpose(input, [0, 2, 3, 1]);\n            }\n            var outputs = tfjs_core_1.conv2dTranspose(input, _this.kernel.read(), outputShape, _this.strides, _this.padding);\n            if (_this.dataFormat !== 'channelsLast') {\n                outputs = K.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (_this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);\n            }\n            if (_this.activation != null) {\n                outputs = _this.activation(outputs);\n            }\n            return outputs;\n        });\n    };\n    Conv2DTranspose.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var outputShape = inputShape.slice();\n        var channelAxis;\n        var heightAxis;\n        var widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        var kernelH = this.kernelSize[0];\n        var kernelW = this.kernelSize[1];\n        var strideH = this.strides[0];\n        var strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            conv_utils_1.deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            conv_utils_1.deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    };\n    Conv2DTranspose.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['dilationRate'];\n        return config;\n    };\n    return Conv2DTranspose;\n}(Conv2D));\nexports.Conv2DTranspose = Conv2DTranspose;\ngeneric_utils.ClassNameMap.register('Conv2DTranspose', Conv2DTranspose);\nvar SeparableConv = (function (_super) {\n    __extends(SeparableConv, _super);\n    function SeparableConv(rank, config) {\n        var _this = _super.call(this, rank, config) || this;\n        _this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        _this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        _this.depthwiseKernel = null;\n        _this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new errors_1.ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new errors_1.ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new errors_1.ValueError(\"SeparableConv\" + _this.rank + \"D supports only padding modes: \" +\n                (\"'same' and 'valid', but received \" + JSON.stringify(config.padding)));\n        }\n        _this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_DEPTHWISE_INITIALIZER);\n        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);\n        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);\n        _this.pointwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_POINTWISE_INITIALIZER);\n        _this.pointwiseRegularizer = regularizers_1.getRegularizer(config.pointwiseRegularizer);\n        _this.pointwiseConstraint = constraints_1.getConstraint(config.pointwiseConstraint);\n        return _this;\n    }\n    SeparableConv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new errors_1.ValueError(\"Inputs to SeparableConv\" + this.rank + \"D should have rank \" +\n                (this.rank + 2 + \", but received input shape: \") +\n                (\"\" + JSON.stringify(inputShape)));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new errors_1.ValueError(\"The channel dimension of the inputs should be defined, \" +\n                (\"but found \" + JSON.stringify(inputShape[channelAxis])));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        var pointwiseKernelShape = [];\n        for (var i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        var trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, types_1.DType.float32, this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, types_1.DType.float32, this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], types_1.DType.float32, this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];\n        this.built = true;\n        var _a;\n    };\n    SeparableConv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var output;\n        if (this.rank === 1) {\n            throw new errors_1.NotImplementedError('1D separable convolution is not implemented yet.');\n        }\n        else if (this.rank === 2) {\n            if (this.dataFormat === 'channelsFirst') {\n                inputs = K.transpose(inputs, [0, 2, 3, 1]);\n            }\n            output = tfjs_core_1.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n        }\n        if (this.useBias) {\n            output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n        }\n        if (this.activation != null) {\n            output = this.activation(output);\n        }\n        if (this.dataFormat === 'channelsFirst') {\n            output = K.transpose(output, [0, 3, 1, 2]);\n        }\n        return output;\n    };\n    SeparableConv.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            initializers_1.serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            initializers_1.serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            constraints_1.serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            constraints_1.serializeConstraint(this.pointwiseConstraint);\n        return config;\n    };\n    return SeparableConv;\n}(Conv));\nexports.SeparableConv = SeparableConv;\nvar SeparableConv2D = (function (_super) {\n    __extends(SeparableConv2D, _super);\n    function SeparableConv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    return SeparableConv2D;\n}(SeparableConv));\nexports.SeparableConv2D = SeparableConv2D;\ngeneric_utils.ClassNameMap.register('SeparableConv2D', SeparableConv2D);\nvar Conv1D = (function (_super) {\n    __extends(Conv1D, _super);\n    function Conv1D(config) {\n        var _this = _super.call(this, 1, config) || this;\n        _this.inputSpec = [{ ndim: 3 }];\n        return _this;\n    }\n    Conv1D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    };\n    return Conv1D;\n}(Conv));\nexports.Conv1D = Conv1D;\ngeneric_utils.ClassNameMap.register('Conv1D', Conv1D);\n"},"lineCount":423}},"hash":"0bb54035c8c26fa6ab6aa1b8b753039f","cacheData":{"env":{}}}